setBatchMode(true);

print("begin")

print("Defining dataset")
run("Define Multi-View Dataset", "type_of_dataset=[Image Stacks (ImageJ Opener)] xml_filename=dataset.xml multiple_timepoints=[YES (one file per time-point)] multiple_channels=[NO (one channel)] _____multiple_illumination_directions=[NO (one illumination direction)] multiple_angles=[YES (one file per angle)] image_file_directory=/scratch/DBC/FACSFAC/atyson/MVR10iter image_file_pattern=Img5_XY1507212931_Z000_T{t}_C{a}.tif timepoints_=0-144 acquisition_angles_=0,90 calibration_type=[Same voxel-size for all views] calibration_definition=[Load voxel-size(s) from file(s)] imglib2_data_container=[ArrayImg (faster)]");


print("Resaving as HDF")
run("As HDF5", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml resave_angle=[All angles] resave_channel=[All channels] resave_illumination=[All illuminations] resave_timepoint=[All Timepoints] subsampling_factors=[{ {1,1,1}, {2,2,1}, {4,4,1} }] hdf5_chunk_sizes=[{ {32,32,4}, {32,32,4}, {16,16,16} }] timepoints_per_partition=1 setups_per_partition=0 use_deflate_compression export_path=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml");


print("Applying preliminary transforms")
//translation (so axis are aligned in space)
run("Apply Transformations", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml apply_to_angle=[All angles] apply_to_channel=[All channels] apply_to_illumination=[All illuminations] apply_to_timepoint=[All Timepoints] transformation=Translation apply=[Current view transformations (appends to current transforms)] same_transformation_for_all_timepoints same_transformation_for_all_angles all_timepoints_channel_0_illumination_0_all_angles=[-512, -512, -461.5]");
//Rotation about y axis (90 deg)
run("Apply Transformations", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml apply_to_angle=[Single angle (Select from List)] apply_to_channel=[All channels] apply_to_illumination=[All illuminations] apply_to_timepoint=[All Timepoints] processing_angle=[angle 90] transformation=Rigid apply=[Current view transformations (appends to current transforms)] define=[Rotation around axis] same_transformation_for_all_timepoints axis_all_timepoints_channel_0_illumination_0_angle_90=y-axis rotation_all_timepoints_channel_0_illumination_0_angle_90=90");

print("Detecting interest points")
run("Detect Interest Points for Registration", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_channel=[All channels] process_illumination=[All illuminations] process_timepoint=[All Timepoints] type_of_interest_point_detection=Difference-of-Gaussian label_interest_points=beads downsample_images subpixel_localization=[3-dimensional quadratic fit] interest_point_specification=[Advanced ...] downsample_xy=[Match Z Resolution (less downsampling)] downsample_z=1x sigma=1.4 threshold=0.01 find_maxima compute_on=[CPU (Java)]");

print("Registration")
run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=40 maximal_number=100 show_timeseries_statistics");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=35 maximal_number=100 show_timeseries_statistics");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=30 maximal_number=100 show_timeseries_statistics");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=25 maximal_number=100 show_timeseries_statistics");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=20 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=18 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=16 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=14 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=13 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=12 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=11 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=10 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=9 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=8 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=7 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=6 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=5 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=3 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=2 maximal_number=100");

run("Register Dataset based on Interest Points", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_illumination=[All illuminations] process_timepoint=[All Timepoints] registration_algorithm=[Iterative closest-point (ICP, no invariance)] type_of_registration=[Register timepoints individually] interest_points_channel_0=beads fix_tiles=[Fix first tile] map_back_tiles=[Do not map back (use this if tiles are fixed)] transformation=Affine regularize_model model_to_regularize_with=Rigid lamba=0.10 maximal_distance=1 maximal_number=100");

print("Multiview reconstruction")
run("Fuse/Deconvolve Dataset", "select_xml=/scratch/DBC/FACSFAC/atyson/MVR10iter/dataset.xml process_angle=[All angles] process_channel=[All channels] process_illumination=[All illuminations] process_timepoint=[All Timepoints] type_of_image_fusion=[Multi-view deconvolution] bounding_box=[Define manually] fused_image=[Save as TIFF stack] minimal_x=-323 minimal_y=-371 minimal_z=-434 maximal_x=255 maximal_y=278 maximal_z=315 imglib2_container=[CellImg (large images)] imglib2_container_ffts=ArrayImg type_of_iteration=[Efficient Bayesian - Optimization I (fast, precise)] image_weights=[Virtual weights (less memory, slower)] osem_acceleration=[1 (balanced)] number_of_iterations=10 use_tikhonov_regularization tikhonov_parameter=0.0060 compute=[Entire image at once] compute_on=[CPU (Java)] psf_estimation=[Provide file with PSF] psf_display=[Do not show PSFs] output_file_directory=/scratch/DBC/FACSFAC/atyson/MVR10iter/ browse=[/scratch/DBC/FACSFAC/atyson/MVR10iter/transfomed PSF of Path A.tif] browse=[/scratch/DBC/FACSFAC/atyson/MVR10iter/transfomed PSF of Path B.tif] transform_psfs psf_file_(angle=0,=[/scratch/DBC/FACSFAC/atyson/MVR10iter//transfomed PSF of Path A.tif] psf_file_(angle=90,=[/scratch/DBC/FACSFAC/atyson/MVR10iter//transfomed PSF of Path B.tif]");

run("Quit") //otherwise xvfb keeps fiji open, waiting for input

print("Done")
